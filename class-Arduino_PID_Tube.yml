id: VVFzgyp4Rns9TMXY
createdBy: MHhLOiC6Lbr0
dateCreated: 1689064662293
name: Arduino - PID Tube
meta:
  logo: >-
    https://raw.githubusercontent.com/VladyslavKnysh/edrys-labs_PIDtube/refs/heads/main/media/TUBE.drawing.png
  description: >+
    This online lab demonstrates a control system that uses an Arduino-based
    setup to levitate a ball in the air and maintain its position using a PID
    (Proportional-Integral-Derivative) controller. The system involves a fan
    that adjusts its output based on feedback from a laser sensor, allowing the
    ball to remain suspended at a set height. Students can interact with the
    system remotely, programming their own PID controller in real time to
    observe the effects on system stability, responsiveness, and accuracy. The
    lab offers hands-on experience in control theory and real-world PID
    implementation.

  selfAssign: true
  defaultNumberOfRooms: '0'
  id: 79sFHo6ONB1S25cTN7emXmOibQ2HNWb2G9X3Xn2x
members:
  teacher:
    - BrzW9fREmtys
    - fF6qHw6EaHrr
  student: []
modules:
  - url: https://edrys-labs.github.io/module-markdown-it/index.html
    config:
      content: >-
        # Introduction to proportional–integral–derivative controller


        ## PID controller


        Machines and processes that need constant management and automated
        modification are frequently managed with a feedback-based control loop
        mechanism called a proportional-integral-derivative (PID) controller.
         - The present set point (SP) − process variable (PV) error value is proportional to term P.
         - Term I generates the I term by integrating the past values of the SP − PV error over time.
         - Term D is the best estimate of the SP − PV error's future trend.
         
         ## Hardware
         
         In this experiment the motor with propeller is used to create air flow that will overcome the gravitation and rise the ball up into the air to the set point level inside an aerodynamic tune. 
         On the picture bellow is showed hardware scheme of the experiment.
         
         <img src ="https://raw.githubusercontent.com/VladyslavKnysh/edrys-labs_PIDtube/refs/heads/main/media/TubeSchematic.png" alt="Hardware scheme"  width="666" height="800">
         <img src ="https://raw.githubusercontent.com/VladyslavKnysh/edrys-labs_PIDtube/refs/heads/main/media/TUBE.drawing.png" alt="Tube scheme"  width="250" height="300">
         
         ## Assignment
         
         In this experiment students are tasked with controlling the affromentioned tube system. The expeiment is separeted into 4 parts:
         - Direct controll 
         - P + direct controll 
         - PD + direct controll 
         - PID + direct controll
    studentConfig:
      content: ''
    teacherConfig:
      content: ''
    stationConfig:
      content: ''
    showInCustom: lobby
    width: 1920
    height: 1080
  - url: https://edrys-labs.github.io/module-markdown-it/index.html
    config:
      content: >-
        # Proportional–integral–derivative controller

        ## Step 1: Direct control of the motor


        **Objective**: To find the coefficient of direct control.


        1. **Prepare the sketch**:

            - Write the primary sketch that will help you use PWM of the Arduino`s D3 pin to controll the motor speed.
             
        2. **Find the coefficient**:

            - There are two main possible roots of performing this task: 
               a) You can start from 0 and gradually increase the pwm value until the ball almost rises up into the air;
               b) Or you can start from the 255 and gradually decrease the pwm value until the ball almost rises up into the air;

        3. **Write down the result**: 

            - Write down the coefficient that was found. It will be used in the next tests.

        ## Step 2: Proportional controller


        **Objective**: To program the algorithm of the Proportional controller.
        and to find the KP value with low steady state error.

          <img src="https://raw.githubusercontent.com/VladyslavKnysh/edrys-labs_PIDtube/refs/heads/main/media/TubeFR_P.png" alt="P scheme">

        1. **Modify Your Code**:

            - Add the following lines to enable laser-ranging module VL53L0X:

               ```cpp
              #include <Wire.h>
              #include <VL53L0X.h>
            
              VL53L0X sensor;
            
                //Enter your global variables here
            
              // the setup function runs once when you press reset or power the board
              void setup() {
                Serial.begin(9600);
                Wire.begin();
            
                sensor.setTimeout(500);
                if (!sensor.init())
                {
                  Serial.println("Failed to detect and initialize sensor!");
                  while (1) {}
                }
               ```

        2. **Make motorCMD dynamic**:

            - Use while loop to perform experiment.  The experiment should be around 15-30  seconds long.
            - motorCMD should change proportionaly to the errorValue.
            - Due to the position of the VL53L0X errorValue can be calculated as follows: 975 - errorValue .
            - Experiment with the KP value to achive lower stady state error. 

        ## Step 3: Proportional-derivative controller


        **Objective**: To add derivative controll to stabilize the system.

          <img src="https://raw.githubusercontent.com/VladyslavKnysh/edrys-labs_PIDtube/refs/heads/main/media/TubeFR_PD.png" alt="PD scheme">

        1. **Understand the derivative controller**:

            - Based on the SetPoint − realPosition error's current rate of change, derivative controller represents the best prediction of its future trend. 
            - i.e. the relation between Change In Error and Change In Time
            - $(Error_i-Error_{i-1})/(dt*i)$

        2. **Implement the derivative control**:

            - Modify the existing loop to use the PD controller.
            - To make the loops more consistent, you should implement a second timer so that each iteration takes the same time.
            - Try to find the best combination of $kp$ and $kd$ coefficients for a fast rise time with not too much overshoot and low steady state error.


          ## Step 4: Proportional-integral-derivative controller

        **Objective**: To reduce the steady state error by adding the integral
        controll.

          <img src="https://raw.githubusercontent.com/VladyslavKnysh/edrys-labs_PIDtube/refs/heads/main/media/TubeFR_PID.png" alt="PID scheme">

        1. **Understand the integral controller**:

          - Integral term sums up all past errors.
          - You can calculate KI sa follows $KI_i=KI_{i-1}+dt*ki*Error_i$ , where $ki$ is the chosen coefficient of the itegral controller
          
        2. **Implement the derivative control**:
         - Implement the PID + direct controller.
         - Try to find the best combination of $kp$,$ki$ and $kd$ coefficients for the best performance.

        ### Wrap-Up
          Congratulations! You have successfully completed the proportional–integral–derivative controller experiment!
    studentConfig:
      content: ''
    teacherConfig:
      content: ''
    stationConfig:
      content: >-
        ## Instructions for Station-Sharing 


        You are currently responsible for sharing a station of this lab.

        You have multiple options to share a or your terminal.

        Therefor we use the pyxtermjs - terminal server from:


        https://github.com/edrys-labs/module-pyxtermjs


        ### Using Docker


        If you haven't done it so far, install
        [docker](https://docs.docker.com/engine/install/).

        Or, follow one of the instruction-videos for your system:


        <details>

        <summary>Install Docker on Linux</summary>  

        <iframe
          style="width: 100%; aspect-ratio: 16 / 9"
          src="https://www.youtube.com/embed/cqbh-RneBlk?si=juvUM5d2OSZ28WBv"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          referrerpolicy="strict-origin-when-cross-origin"
          allowfullscreen></iframe>
        </details>


        <details>

        <summary>Install Docker on Windows</summary>

        <iframe
          style="width: 100%; aspect-ratio: 16 / 9"
          src="https://www.youtube.com/embed/WDEdRmTCSs8?si=X0agStn1akNcZLGu"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          referrerpolicy="strict-origin-when-cross-origin"
          allowfullscreen></iframe>
        </details>


        <details>

        <summary>Install Docker on MacOS</summary>

        <iframe
          style="width: 100%; aspect-ratio: 16 / 9"
          src="https://www.youtube.com/embed/-EXlfSsP49A?si=OZ_l4_2hDKb6ULQ_"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          referrerpolicy="strict-origin-when-cross-origin"
          allowfullscreen></iframe>
        </details>


        Then the only thing that is required is to run the following command:


        ```bash

        docker run -it -p 5000:5000 --device=/dev/ttyACM0:/dev/ttyACM0
        crosslab/edrys_pyxtermjs_arduino:latest

        ```

        or (The choice of the comand is depending on your arduino board)

        ```bash

        docker run -it -p 5000:5000 --device=/dev/ttyUSB0:/dev/ttyUSB0
        crosslab/edrys_pyxtermjs_arduino:latest

        ```


        This will download the pyxtermjs terminal-server from docker-hub and run
        it in a secure environment.

        ### Using Python


        You can also share your terminal directly via Python, visit the
        following project


        https://github.com/edrys-labs/module-pyxtermjs


        ... the easiest way is to perform the following steps:


        ``` bash

        # 1. clone the repository or download the folder manually

        git clone https://github.com/edrys-labs/module-pyxtermjs


        # 2. install all required sources

        pip3 install -r requirements.txt


        # 3. run the terminal-server

        python3 -m pyxtermjs --cors True --command bash --port 5000

        ```
    showInCustom: station
    width: full
    height: medium
  - url: https://edrys-labs.github.io/module-editor/index.html
    config:
      editorText: |
        /*
          Enter your code here
          Example code for the VL53L0X by Pololulu: 
          https://github.com/pololu/vl53l0x-arduino/blob/master/examples/Continuous/Continuous.ino
          The Position Error can be calculated as "975 - sensor.readRangeContinuousMillimeters()"
          If "Failed to detect and initialize sensor!" string is visible in 
          the serial monitor try reuploading the code. 
          If this does not fix the problem contact the station operator. 
        */

        #include <Wire.h>
        #include <VL53L0X.h>

        VL53L0X sensor;

          //Enter your global variables here

        // the setup function runs once when you press reset or power the board
        void setup() {
          Serial.begin(9600);
          Wire.begin();

          sensor.setTimeout(500);
          if (!sensor.init())
          {
            Serial.println("Failed to detect and initialize sensor!");
            while (1) {}
          }

          // Start continuous back-to-back mode (take readings as
          // fast as possible).  To use continuous timed mode
          // instead, provide a desired inter-measurement period in
          // ms (e.g. sensor.startContinuous(100)).
          sensor.startContinuous();
        }

        // the loop function runs over and over again forever
        void loop() {
            // put your main code here, to run repeatedly:
        if(Serial.available()>0){
          int task = Serial.parseInt();
          if(task>0){
          
          }
         }
      runCommand: execute
      language: cpp
      theme: light
    showInCustom: station
    width: 750
    height: medium
  - url: https://edrys-labs.github.io/module-pyxtermjs/index.html
    stationConfig:
      server: http://localhost:5000/pty
      execute: execute
      script: >
        echo $CODE | base64 --decode > tube_sketch.ino

        arduino-cli lib install "VL53L0X"  && arduino-cli sketch new tube_sketch

        olddir=$(pwd)

        mv tube_sketch.ino tube_sketch

        cd tube_sketch

        arduino-cli board attach -p /dev/ttyUSB0 -b
        arduino:avr:nano:cpu=atmega328old

        cd $olddir

        arduino-cli compile tube_sketch  && arduino-cli upload -p /dev/ttyUSB0
        tube_sketch && arduino-cli monitor -p /dev/ttyUSB0 
      enable:
        teacher: true
        student: true
    showInCustom: station
    width: 750
    height: medium
  - url: https://module-stream.netlify.app/
    stationConfig:
      video: true
      audio: false
      mirrorX: false
      mirrorY: false
      rotate: 90
      streamMethod: websocket
      websocketUrl: wss://ws-stream-server.onrender.com
    showInCustom: station
    width: 480
    height: 640
communicationConfig: >-
  N4IgtiBcIOoKYCMDOB7AxgazgFxAGhAHcoiklIB6CuAEwCcBPJAWkMVUx2YAY0AzAIxpuAFj58ArAGYJAOgAWcOigwBXAIYAHTbLQowFEAF8gA
